{"version":3,"sources":["component/Start.js","App.js","serviceWorker.js","index.js"],"names":["Radium","props","className","name","age","type","value","onChange","change","changeAge","onClick","click","App","state","person","id","showPerson","switchNameHandler","alert","changeName","event","personIndex","findIndex","p","target","persons","setState","changeage","deletePersonHandler","splice","toggle","e","checkStatus","style","backgroundColor","color","this","map","index","key","classes","length","push","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d24bff50.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Start.css\";\nimport Radium from 'radium'\n\nconst Starter = props => {\n  return (\n    <div className=\"Person\">\n      <p>\n        My Name is {props.name} am {props.age} Years Old\n      </p>\n\n      <p>\n        Name: <input type=\"text\" value={props.name} onChange={props.change} />\n      </p>\n\n      <p>\n        Age: <input type=\"text\" value={props.age} onChange={props.changeAge} />\n      </p>\n      <button onClick={props.click}>Delete User</button>\n    </div>\n  );\n};\n\nexport default Radium(Starter);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Starter from \"./component/Start.js\";\nimport Radium from 'radium';\n\nclass App extends Component {\n  state = {\n    person: [\n      { id: \"bhcbhdbjhx\", name: \"Cybercode2000\", age: 5 },\n      { id: \"hbjhbsdbjh\", name: \"Iremide\", age: 10 },\n      { id: \"sbcjbdsjhbchjbd\", name: \"Cybercode\", age: 10 },\n      { id: \"bjsbhdb\", name: \"Oluwadamilare\", age: 30 }\n    ],\n    showPerson: false\n  };\n\n  switchNameHandler = () => {\n    alert(\"hello world\");\n  };\n\n  changeName = (event, id) => {\n    const personIndex = this.state.person.findIndex(p => {\n      return p.id === id;\n    });\n    const person = {\n      ...this.state.person[personIndex]\n    };\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.person];\n    persons[personIndex] = person;\n\n    this.setState({\n      person: persons\n    });\n  };\n\n  changeage = (event, id) => {\n    const personIndex = this.state.person.findIndex(p => {\n      return p.id === id;\n    });\n    const person = {\n      ...this.state.person[personIndex]\n    };\n\n    person.age = event.target.value;\n\n    const persons = [...this.state.person];\n    persons[personIndex] = person;\n\n    this.setState({ person: persons });\n  };\n\n  deletePersonHandler = personIndex => {\n    const persons = [...this.state.person];\n    persons.splice(personIndex, 1);\n    this.setState({ person: persons });\n  };\n\n  toggle = e => {\n    const checkStatus = this.state.showPerson;\n    this.setState({\n      showPerson: !checkStatus\n    });\n  };\n\n  render() {\n    let person = null;\n\n    const style = {\n      backgroundColor: \"green\",\n      color: \"white\",\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n\n    if (this.state.showPerson) {\n      person = (\n        <div>\n          {this.state.person.map((persons, index) => {\n            return (\n              <Starter\n                click={() => this.deletePersonHandler(index)}\n                name={persons.name}\n                age={persons.age}\n                key={persons.id}\n                change={event => this.changeName(event, persons.id)}\n                changeAge={event => this.changeage(event, persons.id)}\n              ></Starter>\n            );\n          })}\n        </div>\n      );\n\n      style[':hover'] = {\n        backgroundColor: 'lightred',\n        color: 'black'\n      }\n\n      style.backgroundColor = \"red\";\n      style.color = \"black\";\n\n    }\n    const classes = [];\n\n    if (this.state.person.length <= 2) {\n      classes.push(\"red\");\n    }\n\n    if (this.state.person.length <= 1) {\n      classes.push(\"bold\");\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Hi, I'm a React App</h1>\n        <p className={classes.join(' ')}>This is really working!</p>\n        <button style={style} onClick={this.toggle}>\n          Switch here\n        </button>\n        <div>{person}</div>\n      </div>\n    );\n  }\n}\n\nexport default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}